[{"/Users/chadlew/Desktop/chartpractice/src/index.js":"1","/Users/chadlew/Desktop/chartpractice/src/App.js":"2","/Users/chadlew/Desktop/chartpractice/src/components/screens/Coins/CoinDetails.js":"3","/Users/chadlew/Desktop/chartpractice/src/components/screens/Coins/CoinDetail.js":"4","/Users/chadlew/Desktop/chartpractice/src/components/screens/Home/Home.js":"5","/Users/chadlew/Desktop/chartpractice/src/PaginationBar.js":"6","/Users/chadlew/Desktop/chartpractice/src/LoadingSpinner.js":"7","/Users/chadlew/Desktop/chartpractice/src/helpers/slicePathName.js":"8","/Users/chadlew/Desktop/chartpractice/src/helpers/dateConversion.js":"9","/Users/chadlew/Desktop/chartpractice/src/chartConfig/chartConfig.js":"10"},{"size":194,"mtime":1628826020301,"results":"11","hashOfConfig":"12"},{"size":614,"mtime":1628826020300,"results":"13","hashOfConfig":"12"},{"size":3358,"mtime":1628831269145,"results":"14","hashOfConfig":"12"},{"size":3232,"mtime":1628831570912,"results":"15","hashOfConfig":"12"},{"size":395,"mtime":1628826020301,"results":"16","hashOfConfig":"12"},{"size":599,"mtime":1628826020300,"results":"17","hashOfConfig":"12"},{"size":342,"mtime":1628826020300,"results":"18","hashOfConfig":"12"},{"size":200,"mtime":1628826020301,"results":"19","hashOfConfig":"12"},{"size":781,"mtime":1628826020301,"results":"20","hashOfConfig":"12"},{"size":1151,"mtime":1628826020300,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1rqhgdj",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"/Users/chadlew/Desktop/chartpractice/src/index.js",[],["46","47"],"/Users/chadlew/Desktop/chartpractice/src/App.js",[],"/Users/chadlew/Desktop/chartpractice/src/components/screens/Coins/CoinDetails.js",["48"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport axios from \"axios\";\n\nimport \"./Coins.css\";\n\nimport {\n  Button,\n  Container,\n  Table,\n  InputGroup,\n  InputGroupText,\n  InputGroupAddon,\n  Input,\n} from \"reactstrap\";\n\n// Component imports\nimport PaginationBar from \"../../../PaginationBar\";\nimport LoadingSpinner from \"../../../LoadingSpinner\";\n\nconst CoinDetails = () => {\n  const [coins, setCoins] = useState([]);\n  const [paginatedValue, setPaginatedValue] = useState(1); // allow pagination\n  const [isLoading, setIsLoading] = useState(false);\n  const [cryptoName, setCryptoName] = useState({});\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setCryptoName({ ...cryptoName, [name]: value.replace(\" \", \"-\") });\n    console.log(cryptoName);\n  };\n\n  useEffect(() => {\n    const fetch = async () => {\n      setIsLoading(true);\n      const { data } = await axios.get(\n        `${process.env.REACT_APP_COINDETAILS_URL_ONE}${paginatedValue}${process.env.REACT_APP_COINDETAILS_URL_TWO}`\n      );\n      setCoins(data);\n      setIsLoading(false);\n    };\n    fetch();\n  }, [paginatedValue]);\n\n  const paginate = (val) => {\n    setPaginatedValue(val);\n  };\n\n  return (\n    <Container className=\"coins_container\">\n      {isLoading && <LoadingSpinner />}\n      <Container>\n        <h1>Coin Details</h1>\n        <Link to=\"/\">\n          <Button>Go Home</Button>\n        </Link>\n        <InputGroup>\n          <InputGroupAddon addonType=\"append\">\n            <Input\n              onChange={handleInputChange}\n              name=\"crypto\"\n              placeholder=\"Enter Any Crypto\"\n            />\n            <Link to={`/coin/${cryptoName.crypto}`}>\n              <Button>To The Moon</Button>\n            </Link>\n          </InputGroupAddon>\n        </InputGroup>\n        <PaginationBar\n          setPagination={paginate}\n          nums={[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}\n        />\n      </Container>\n      <Table>\n        <thead>\n          <tr>\n            <th>Symbol</th>\n            <th>Coin</th>\n            <th>Current Price</th>\n            <th>Market Cap Rank</th>\n            <th>Get More Insights</th>\n          </tr>\n        </thead>\n        <tbody>\n          {coins &&\n            coins.map((coin) => {\n              return (\n                <tr key={coin.id}>\n                  <td className=\"coin-symbol\">\n                    <span>{coin.symbol}</span>\n                  </td>\n                  <td className=\"coin-dat\">\n                    <div>\n                      <img src={coin.image} alt={coin.id} />\n                      {coin.id}\n                    </div>\n                  </td>\n                  <td className=\"coin-price\">\n                    <span>$ {coin.current_price.toFixed(2)}</span>\n                  </td>\n                  <td className=\"coin-market\">\n                    <span>{coin.market_cap_rank}</span>\n                  </td>\n                  <td className=\"coin-link\">\n                    <div>\n                      <Link to={`/coin/${coin.id}`}>\n                        <Button color=\"primary\">See more</Button>\n                      </Link>\n                    </div>\n                  </td>\n                </tr>\n              );\n            })}\n        </tbody>\n      </Table>\n    </Container>\n  );\n};\n\nexport default CoinDetails;\n","/Users/chadlew/Desktop/chartpractice/src/components/screens/Coins/CoinDetail.js",["49"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Line } from \"react-chartjs-2\";\nimport axios from \"axios\";\nimport { Button, Container } from \"reactstrap\";\nimport { useHistory } from \"react-router-dom\";\n// Component imports\nimport PaginationBar from \"../../../PaginationBar\";\nimport LoadingSpinner from \"../../../LoadingSpinner\";\n\n// Helper methods\nimport { createDatePriceCollection } from \"../../../helpers/dateConversion\";\nimport {\n  slicePathName,\n  sliceAndUpperCasePathName,\n} from \"../../../helpers/slicePathName\";\n\n// Chart Configs\nimport { dataObj, optionsObj } from \"../../../chartConfig/chartConfig\";\n\nconst CoinDetail = ({ match, location }) => {\n  const history = useHistory();\n  const [isLoading, setIsLoading] = useState(false);\n  const [paginatedDayValue, setPaginatedDayValue] = useState(7); // allow pagination\n\n  const [coinPrice, setCoinPrice] = useState(null);\n  const [coin, setCoin] = useState(\"\");\n  const [coinData, setCoinData] = useState({});\n\n  // Grab the coin name from the url path\n  const coinName = slicePathName(location.pathname);\n\n  // Get the prcies of the coin based off pagiination selection (initial query is 7 days)\n  useEffect(() => {\n    fetchCoinPrice();\n    fetchCoinData();\n  }, []);\n\n  const fetchCoinPrice = async () => {\n    setIsLoading(true);\n    try {\n      const { data } = await axios.get(\n        `${process.env.REACT_APP_PRICE_ONE}${coinName}${process.env.REACT_APP_PRICE_TWO} `\n      );\n      setCoinPrice(data[coinName].usd);\n    } catch (e) {\n      history.push(\"/\");\n    }\n  };\n  const fetchCoinData = async () => {\n    setCoin(sliceAndUpperCasePathName(location));\n    try {\n      const { data } = await axios.get(\n        `${process.env.REACT_APP_DATA_ONE}${coinName}${process.env.REACT_APP_DATA_TWO}${paginatedDayValue}${process.env.REACT_APP_DATA_THREE}`\n      );\n      setCoinData(data);\n      setIsLoading(false);\n    } catch (e) {\n      history.push(\"/\");\n    }\n  };\n\n  // Only if the coinData exists should we run our conversions\n  const formatCoinData = () => {\n    if (coinData && coinData.prices) {\n      return createDatePriceCollection(coinData);\n    } else {\n      return [];\n    }\n  };\n\n  return (\n    <Container className=\"coins_container\">\n      {isLoading && <LoadingSpinner />}\n      {coin && (\n        <div>\n          <div className=\"top-info\">\n            <h1>{coin}</h1>\n            <div className=\"insight-numbers\">\n              {coinPrice && <span>Current price: ${coinPrice}</span>}\n            </div>\n          </div>\n          <Link to=\"/coindetails\">\n            <Button>Go Back</Button>\n          </Link>\n          <p\n            style={{\n              color: \"#fff\",\n              margin: \"1rem\",\n            }}\n          >\n            Select number of days to look back at price fluctuation\n          </p>\n          <PaginationBar\n            setPagination={setPaginatedDayValue}\n            nums={[7, 14, 30, 90, 365]}\n          />\n        </div>\n      )}\n\n      <div style={{ marginTop: \"50px\" }}>\n        <Line\n          data={dataObj(formatCoinData)}\n          options={optionsObj(coin, paginatedDayValue)}\n        />\n      </div>\n    </Container>\n  );\n};\n\nexport default CoinDetail;\n","/Users/chadlew/Desktop/chartpractice/src/components/screens/Home/Home.js",[],"/Users/chadlew/Desktop/chartpractice/src/PaginationBar.js",[],"/Users/chadlew/Desktop/chartpractice/src/LoadingSpinner.js",[],"/Users/chadlew/Desktop/chartpractice/src/helpers/slicePathName.js",[],"/Users/chadlew/Desktop/chartpractice/src/helpers/dateConversion.js",[],"/Users/chadlew/Desktop/chartpractice/src/chartConfig/chartConfig.js",[],["50","51"],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":13,"column":3,"nodeType":"58","messageId":"59","endLine":13,"endColumn":17},{"ruleId":"60","severity":1,"message":"61","line":37,"column":6,"nodeType":"62","endLine":37,"endColumn":8,"suggestions":"63"},{"ruleId":"52","replacedBy":"64"},{"ruleId":"54","replacedBy":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'InputGroupText' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchCoinData' and 'fetchCoinPrice'. Either include them or remove the dependency array.","ArrayExpression",["68"],["66"],["67"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [fetchCoinData, fetchCoinPrice]",{"range":"71","text":"72"},[1277,1279],"[fetchCoinData, fetchCoinPrice]"]